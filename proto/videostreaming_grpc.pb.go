// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
)

type VideoStreamingClient interface {
	ProcessVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoPartsResponse, error)
}

type VideoStreamingServer interface {
	ProcessVideo(context.Context, *VideoRequest) (*VideoPartsResponse, error)
}

type UnimplementedVideoStreamingServer struct{}

func (*UnimplementedVideoStreamingServer) ProcessVideo(context.Context, *VideoRequest) (*VideoPartsResponse, error) {
	return nil, grpc.Errorf(grpc.Code(grpc.ErrServerStopped), "method ProcessVideo not implemented")
}

func RegisterVideoStreamingServer(s grpc.ServiceRegistrar, srv VideoStreamingServer) {
	s.RegisterService(&VideoStreaming_ServiceDesc, srv)
}
var VideoStreaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videostreaming.VideoStreaming",
	HandlerType: (*VideoStreamingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessVideo",
			Handler:    _VideoStreaming_ProcessVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/videostreaming.proto",
}

func _VideoStreaming_ProcessVideo_Handler(
	srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor,
) (interface{}, error) {
	in := new(VideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamingServer).ProcessVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videostreaming.VideoStreaming/ProcessVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamingServer).ProcessVideo(ctx, req.(*VideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

